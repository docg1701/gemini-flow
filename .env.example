# ==============================================================================
# Gemini-Flow Project Environment Variables
#
# Instructions:
# 1. Copy this file to a new file named `.env` in the project root:
#    cp .env.example .env
# 2. Edit the `.env` file with your specific configurations.
# 3. This `.env` file is used by `docker-compose.yml` to configure services
#    and by `backend/config.py` to load application settings.
#    It should be listed in `.gitignore` to prevent committing secrets.
# ==============================================================================

# ------------------------------------------------------------------------------
# Backend Service (Python/FastAPI)
# ------------------------------------------------------------------------------

# --- Mandatory Settings ---
# Your Google Gemini API Key.
# Obtain from: https://aistudio.google.com/app/apikey
GEMINI_API_KEY="YOUR_GEMINI_API_KEY_HERE"

# --- Optional Runtime Settings ---
# Port the backend service will listen on *inside* the container.
# This is also used by the healthcheck in docker-compose.yml.
BACKEND_CONTAINER_PORT=8000

# Port on the host machine that maps to the backend container's port.
BACKEND_HOST_PORT=8000

# Python Log Level for the backend application.
# Requires code changes in backend/main.py or backend/config.py to be utilized.
# Example: INFO, DEBUG, WARNING, ERROR, CRITICAL
# PYTHON_LOG_LEVEL=INFO

# Python Debug Mode for the backend application.
# Requires code changes in backend/config.py to be utilized.
# Example: True, False
# PYTHON_DEBUG_MODE=False

# --- Optional Test Settings ---
# Overrides the default 'output/' directory for generated files during tests.
# This is used by backend/file_generator.py.
# JULES_TEST_OUTPUT_DIR=./test_outputs

# ------------------------------------------------------------------------------
# Frontend Service (React served by Nginx)
# ------------------------------------------------------------------------------

# --- Optional Runtime Settings ---
# Port the Nginx service will listen on *inside* the container.
NGINX_CONTAINER_PORT=80

# Port on the host machine that maps to the Nginx container's port.
FRONTEND_HOST_PORT=3000

# Base URL for the backend API, used by the frontend.
# If your frontend makes API calls to a different host/port than where it's served,
# or if not using a proxy, set this. Create React App uses this if defined
# during build (as process.env.REACT_APP_API_BASE_URL).
# Example for local development: REACT_APP_API_BASE_URL=http://localhost:8000
# If using CRA proxy and backend is on same Docker network, relative paths usually work.
# REACT_APP_API_BASE_URL=

# ------------------------------------------------------------------------------
# Docker Build Arguments (used in Dockerfile)
# These define versions for base images and other build-time configurations.
# ------------------------------------------------------------------------------

# Version for the Node.js base image (frontend build stage).
# Example: 20-slim, 22-alpine
DOCKER_NODE_VERSION=22-slim

# Version for the Python base image (backend application stage).
# Example: 3.12-slim, 3.11-bookworm
DOCKER_PYTHON_VERSION=3.12-slim

# Version for the Nginx base image (frontend runtime stage).
# Example: 1.26-alpine, stable-alpine
DOCKER_NGINX_VERSION=1.26-alpine

# User and group for running the backend application inside the container.
# These are created in the Dockerfile.
BACKEND_APP_USER=appuser
BACKEND_APP_GROUP=appgroup

# Advanced Poetry install options for Docker build (rarely needed).
# Example: --no-dev --no-root
# DOCKER_POETRY_INSTALL_OPTIONS=--no-interaction --no-ansi
