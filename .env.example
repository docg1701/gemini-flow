# ==============================================================================
# Gemini-Flow Project Environment Variables
#
# Instructions:
# 1. Copy this file to a new file named `.env` in the project root:
#    cp .env.example .env
# 2. Edit the `.env` file with your specific configurations.
# 3. This `.env` file is used by `docker-compose.yml` to configure services
#    and by `backend/config.py` to load application settings.
#    It should be listed in `.gitignore` to prevent committing secrets.
# ==============================================================================

# ------------------------------------------------------------------------------
# General Project Settings
# ------------------------------------------------------------------------------
# Defines the base name for Docker containers and other project-specific resources.
# Used in docker-compose.yml for container_name.
PROJECT_NAME=geminiflow

# ------------------------------------------------------------------------------
# Backend Service (Python/FastAPI)
# ------------------------------------------------------------------------------

# --- Mandatory Settings ---
# Your Google Gemini API Key.
# Obtain from: https://aistudio.google.com/app/apikey
GEMINI_API_KEY="YOUR_GEMINI_API_KEY_HERE"

# --- Optional Runtime Settings (Backend) ---
# Port the backend service will listen on *inside* the container.
# This is also used by the healthcheck in docker-compose.yml.
BACKEND_CONTAINER_PORT=8000

# Port on the host machine that maps to the backend container's port.
BACKEND_HOST_PORT=8000

# Python Log Level for the backend application.
# Used by backend/main.py (if logging is configured to use it) and backend/config.py (potentially).
# Valid values: DEBUG, INFO, WARNING, ERROR, CRITICAL
PYTHON_LOG_LEVEL=INFO

# Python Debug Mode for the backend application.
# Potentially used by backend/config.py or other backend modules.
# Valid values: True, False
PYTHON_DEBUG_MODE=False

# --- Optional Test Settings (Backend) ---
# Overrides the default 'output/' directory for generated files during tests.
# This is used by backend/file_generator.py.
JULES_TEST_OUTPUT_DIR=./test_outputs

# ------------------------------------------------------------------------------
# Frontend Service (React served by Nginx)
# ------------------------------------------------------------------------------

# --- Optional Runtime Settings (Frontend) ---
# Port the Nginx service (serving the frontend) will listen on *inside* the container.
NGINX_CONTAINER_PORT=80

# Port on the host machine that maps to the Nginx container's port.
FRONTEND_HOST_PORT=3000

# Base URL for the backend API, used by the frontend AT BUILD TIME.
# Create React App (CRA) uses this if defined during build (as process.env.REACT_APP_API_BASE_URL).
# If using an Nginx proxy (as configured in this project, where frontend API calls go to /api
# and Nginx routes them to the backend), this variable might not be strictly necessary for runtime
# if the frontend's api.ts is hardcoded to use relative paths like '/api'.
# However, it's good practice to have it for potential build-time use or future flexibility.
# For the current Nginx setup, if set, it should ideally be '/api' or an empty string if
# the frontend's fetch calls are already correctly prefixed.
# Example for explicit backend URL (if not using Nginx proxy or if proxy needs full path):
# REACT_APP_API_BASE_URL=http://localhost:8000/api
# Example for CRA with Nginx proxy (if api.ts uses it):
# REACT_APP_API_BASE_URL=/api
REACT_APP_API_BASE_URL=

# ------------------------------------------------------------------------------
# Docker Build Arguments (used in Dockerfile)
# These define versions for base images and other build-time configurations.
# They are consumed by ARG instructions in the Dockerfile.
# ------------------------------------------------------------------------------

# Version for the Node.js base image (frontend build stage).
# Example: 20-slim, 22-alpine
DOCKER_NODE_VERSION=22-slim

# Version for the Python base image (backend application stage).
# Example: 3.12-slim, 3.11-bookworm
DOCKER_PYTHON_VERSION=3.12-slim

# Version for the Nginx base image (frontend runtime stage).
# Example: 1.26-alpine, stable-alpine
DOCKER_NGINX_VERSION=1.26-alpine

# User and group for running the backend application inside the container.
# These are created in the Dockerfile.
BACKEND_APP_USER=appuser
BACKEND_APP_GROUP=appgroup

# Advanced Poetry install options for Docker build (rarely needed).
# Example: --no-dev --no-root
# DOCKER_POETRY_INSTALL_OPTIONS=--no-interaction --no-ansi
